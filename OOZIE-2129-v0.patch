diff --git core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java
index 3383522..f117e91 100644
--- core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java
+++ core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java
@@ -57,6 +57,7 @@ import org.apache.oozie.action.ActionExecutor;
 import org.apache.oozie.action.ActionExecutorException;
 import org.apache.oozie.client.OozieClient;
 import org.apache.oozie.client.WorkflowAction;
+import org.apache.oozie.command.wf.ActionStartXCommand;
 import org.apache.oozie.service.ConfigurationService;
 import org.apache.oozie.service.HadoopAccessorException;
 import org.apache.oozie.service.HadoopAccessorService;
@@ -831,8 +832,13 @@ public class JavaActionExecutor extends ActionExecutor {
             launcherJobConf.setBoolean("mapreduce.job.complete.cancel.delegation.tokens", true);
             setupLauncherConf(launcherJobConf, actionXml, appPathRoot, context);
 
+            String launcherTag = action.getId();
+            // Extracting tag and appending action name to maintain the uniqueness.
+            if(context.getVar(ActionStartXCommand.COORD_ACTION_TAG)!= null) {
+                launcherTag = context.getVar(ActionStartXCommand.COORD_ACTION_TAG);
+            }
             // Properties for when a launcher job's AM gets restarted
-            LauncherMapperHelper.setupYarnRestartHandling(launcherJobConf, actionConf, action.getId());
+            LauncherMapperHelper.setupYarnRestartHandling(launcherJobConf, actionConf, launcherTag);
 
             String actionShareLibProperty = actionConf.get(ACTION_SHARELIB_FOR + getType());
             if (actionShareLibProperty != null) {
diff --git core/src/main/java/org/apache/oozie/action/hadoop/LauncherMapperHelper.java core/src/main/java/org/apache/oozie/action/hadoop/LauncherMapperHelper.java
index 069a734..cf11947 100644
--- core/src/main/java/org/apache/oozie/action/hadoop/LauncherMapperHelper.java
+++ core/src/main/java/org/apache/oozie/action/hadoop/LauncherMapperHelper.java
@@ -164,17 +164,19 @@ public class LauncherMapperHelper {
         launcherConf.set("mapred.output.dir", new Path(actionDir, "output").toString());
     }
 
-    public static void setupYarnRestartHandling(JobConf launcherJobConf, Configuration actionConf, String actionId)
+    public static void setupYarnRestartHandling(JobConf launcherJobConf, Configuration actionConf, String launcherTag)
             throws NoSuchAlgorithmException {
         launcherJobConf.setLong("oozie.job.launch.time", System.currentTimeMillis());
         // Tags are limited to 100 chars so we need to hash them to make sure (the actionId otherwise doesn't have a max length)
-        String tag = getTag(actionId);
-        actionConf.set("mapreduce.job.tags", tag);
+        String tag = getTag(launcherTag);
+        // keeping the child.mapreduce.job.tags instead of mapreduce.job.tags to avoid killing launcher itself.
+        // mapreduce.job.tags should only go to child job launch by launcher.
+        actionConf.set(LauncherMain.CHILD_MAPREDUCE_JOB_TAGS, tag);
     }
 
-    private static String getTag(String actionId) throws NoSuchAlgorithmException {
+    private static String getTag(String launcherTag) throws NoSuchAlgorithmException {
         MessageDigest digest = MessageDigest.getInstance("MD5");
-        digest.update(actionId.getBytes(), 0, actionId.length());
+        digest.update(launcherTag.getBytes(), 0, launcherTag.length());
         String md5 = "oozie-" + new BigInteger(1, digest.digest()).toString(16);
         return md5;
     }
diff --git core/src/main/java/org/apache/oozie/action/oozie/SubWorkflowActionExecutor.java core/src/main/java/org/apache/oozie/action/oozie/SubWorkflowActionExecutor.java
index 527a5e2..38fe34b 100644
--- core/src/main/java/org/apache/oozie/action/oozie/SubWorkflowActionExecutor.java
+++ core/src/main/java/org/apache/oozie/action/oozie/SubWorkflowActionExecutor.java
@@ -24,6 +24,7 @@ import org.apache.oozie.action.ActionExecutorException;
 import org.apache.oozie.DagEngine;
 import org.apache.oozie.LocalOozieClient;
 import org.apache.oozie.WorkflowJobBean;
+import org.apache.oozie.command.wf.ActionStartXCommand;
 import org.apache.oozie.service.ConfigurationService;
 import org.apache.oozie.service.DagEngineService;
 import org.apache.oozie.client.WorkflowAction;
@@ -181,6 +182,13 @@ public class SubWorkflowActionExecutor extends ActionExecutor {
                 //TODO: this has to be refactored later to be done in a single place for REST calls and this
                 JobUtils.normalizeAppPath(context.getWorkflow().getUser(), context.getWorkflow().getGroup(),
                                           subWorkflowConf);
+
+                // pushing the tag to conf for using by Launcher.
+                if(context.getVar(ActionStartXCommand.COORD_ACTION_TAG) != null) {
+                    subWorkflowConf.set(ActionStartXCommand.COORD_ACTION_TAG,
+                            context.getVar(ActionStartXCommand.COORD_ACTION_TAG));
+                }
+
                 // if the rerun failed node option is provided during the time of rerun command, old subworkflow will
                 // rerun again.
                 if(action.getExternalId() != null && parentConf.getBoolean(OozieClient.RERUN_FAIL_NODES, false)) {
diff --git core/src/main/java/org/apache/oozie/command/wf/ActionStartXCommand.java core/src/main/java/org/apache/oozie/command/wf/ActionStartXCommand.java
index d4048a1..027cf09 100644
--- core/src/main/java/org/apache/oozie/command/wf/ActionStartXCommand.java
+++ core/src/main/java/org/apache/oozie/command/wf/ActionStartXCommand.java
@@ -68,6 +68,7 @@ public class ActionStartXCommand extends ActionXCommand<Void> {
     public static final String COULD_NOT_START = "COULD_NOT_START";
     public static final String START_DATA_MISSING = "START_DATA_MISSING";
     public static final String EXEC_DATA_MISSING = "EXEC_DATA_MISSING";
+    public static final String COORD_ACTION_TAG = "coord.action.tag";
 
     private String jobId = null;
     private String actionId = null;
@@ -231,6 +232,19 @@ public class ActionStartXCommand extends ActionXCommand<Void> {
                 Instrumentation.Cron cron = new Instrumentation.Cron();
                 cron.start();
                 context.setStartTime();
+                                                /*
+                Creating and forwarding the tag, It will be useful during repeat attempts of Launcher, to ensure only
+                one child job is running. Tag is formed as follows:
+                For workflow job, tag = action-id
+                For Coord job, tag = coord-action-id@action-name (if not part of sub flow), else
+                coord-action-id@subflow-action-name@action-name.
+                 */
+                if (conf.get(COORD_ACTION_TAG) != null) {
+                    context.setVar(COORD_ACTION_TAG, conf.get(COORD_ACTION_TAG) + "@" + wfAction.getName());
+
+                } else if (wfJob.getParentId() != null) {
+                    context.setVar(COORD_ACTION_TAG, wfJob.getParentId() + "@" + wfAction.getName());
+                }
                 executor.start(context, wfAction);
                 cron.stop();
                 FaultInjection.activate("org.apache.oozie.command.SkipCommitFaultInjection");
diff --git hadooplibs/hadoop-utils-2/src/main/java/org/apache/oozie/action/hadoop/LauncherMainHadoopUtils.java hadooplibs/hadoop-utils-2/src/main/java/org/apache/oozie/action/hadoop/LauncherMainHadoopUtils.java
index f6bb6a4..746d687 100644
--- hadooplibs/hadoop-utils-2/src/main/java/org/apache/oozie/action/hadoop/LauncherMainHadoopUtils.java
+++ hadooplibs/hadoop-utils-2/src/main/java/org/apache/oozie/action/hadoop/LauncherMainHadoopUtils.java
@@ -34,27 +34,25 @@ import org.apache.hadoop.yarn.client.ClientRMProxy;
 import org.apache.hadoop.yarn.client.api.YarnClient;
 import org.apache.hadoop.yarn.exceptions.YarnException;
 import org.apache.hadoop.mapreduce.TypeConverter;
+import org.apache.log4j.Logger;
 
 public class LauncherMainHadoopUtils {
+    private static Logger logger = Logger.getLogger("LauncherMainHadoopUtils");
 
     private LauncherMainHadoopUtils() {
     }
 
     private static Set<ApplicationId> getChildYarnJobs(Configuration actionConf) {
+        System.out.println("Fetching child yarn jobs");
         Set<ApplicationId> childYarnJobs = new HashSet<ApplicationId>();
-        long startTime = 0L;
-        try {
-            startTime = Long.parseLong((System.getProperty("oozie.job.launch.time")));
-        } catch(NumberFormatException nfe) {
-            throw new RuntimeException("Could not find Oozie job launch time", nfe);
+        if (actionConf.get("mapreduce.job.tags") == null) {
+            logger.warn("Could not find Yarn tags property (mapreduce.job.tags)");
+            return childYarnJobs;
         }
         String tag = actionConf.get("mapreduce.job.tags");
-        if (tag == null) {
-            throw new RuntimeException("Could not find Yarn tags property (mapreduce.job.tags)");
-        }
+        System.out.println( "tag id : " + tag);
         GetApplicationsRequest gar = GetApplicationsRequest.newInstance();
         gar.setScope(ApplicationsRequestScope.OWN);
-        gar.setStartRange(startTime, System.currentTimeMillis());
         gar.setApplicationTags(Collections.singleton(tag));
         try {
             ApplicationClientProtocol proxy = ClientRMProxy.createRMProxy(actionConf, ApplicationClientProtocol.class);
@@ -68,6 +66,7 @@ public class LauncherMainHadoopUtils {
         } catch (YarnException ye) {
             throw new RuntimeException("Exception occurred while finding child jobs", ye);
         }
+        System.out.println(childYarnJobs.size() + " Child yarn jobs are found");
         return childYarnJobs;
     }
 
diff --git sharelib/hive/src/main/java/org/apache/oozie/action/hadoop/HiveMain.java sharelib/hive/src/main/java/org/apache/oozie/action/hadoop/HiveMain.java
index 6278d29..5303a09 100644
--- sharelib/hive/src/main/java/org/apache/oozie/action/hadoop/HiveMain.java
+++ sharelib/hive/src/main/java/org/apache/oozie/action/hadoop/HiveMain.java
@@ -84,6 +84,8 @@ public class HiveMain extends LauncherMain {
         }
 
         hiveConf.addResource(new Path("file:///", actionXml));
+        
+        setYarnTag(hiveConf);
 
         // Propagate delegation related props from launcher job to Hive job
         String delegationToken = getFilePathFromEnv("HADOOP_TOKEN_FILE_LOCATION");
diff --git sharelib/hive2/src/main/java/org/apache/oozie/action/hadoop/Hive2Main.java sharelib/hive2/src/main/java/org/apache/oozie/action/hadoop/Hive2Main.java
index 6d4f44a..3b2d556 100644
--- sharelib/hive2/src/main/java/org/apache/oozie/action/hadoop/Hive2Main.java
+++ sharelib/hive2/src/main/java/org/apache/oozie/action/hadoop/Hive2Main.java
@@ -65,6 +65,7 @@ public class Hive2Main extends LauncherMain {
         }
 
         actionConf.addResource(new Path("file:///", actionXml));
+        setYarnTag(actionConf);
 
         // Propagate delegation related props from launcher job to Hive job
         String delegationToken = getFilePathFromEnv("HADOOP_TOKEN_FILE_LOCATION");
diff --git sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/JavaMain.java sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/JavaMain.java
index f58ff1d..10a1b12 100644
--- sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/JavaMain.java
+++ sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/JavaMain.java
@@ -20,10 +20,7 @@
 package org.apache.oozie.action.hadoop;
 
 import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.fs.Path;
 
-import java.io.File;
-import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
@@ -43,6 +40,8 @@ public class JavaMain extends LauncherMain {
 
         Configuration actionConf = loadActionConf();
 
+        setYarnTag(actionConf);
+
         LauncherMainHadoopUtils.killChildYarnJobs(actionConf);
 
         Class<?> klass = actionConf.getClass(JAVA_MAIN_CLASS, Object.class);
diff --git sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/LauncherMain.java sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/LauncherMain.java
index 552c862..ffb3e67 100644
--- sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/LauncherMain.java
+++ sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/LauncherMain.java
@@ -38,6 +38,7 @@ import org.apache.hadoop.mapred.JobConf;
 public abstract class LauncherMain {
 
     public static final String HADOOP_JOBS = "hadoopJobs";
+    public static final String CHILD_MAPREDUCE_JOB_TAGS = "child.mapreduce.job.tags";
 
     protected static void run(Class<? extends LauncherMain> klass, String[] args) throws Exception {
         LauncherMain main = klass.newInstance();
@@ -172,6 +173,12 @@ public abstract class LauncherMain {
         actionConf.addResource(new Path("file:///", actionXml));
         return actionConf;
     }
+
+    protected static void setYarnTag(Configuration actionConf) {
+        if(actionConf.get(CHILD_MAPREDUCE_JOB_TAGS) != null) {
+            actionConf.set("mapreduce.job.tags",actionConf.get(CHILD_MAPREDUCE_JOB_TAGS));
+        }
+    }
 }
 
 class LauncherMainException extends Exception {
diff --git sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/LauncherMapper.java sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/LauncherMapper.java
index 9c3128f..3748c14 100644
--- sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/LauncherMapper.java
+++ sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/LauncherMapper.java
@@ -18,15 +18,7 @@
 
 package org.apache.oozie.action.hadoop;
 
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.FileReader;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStreamWriter;
-import java.io.PrintWriter;
-import java.io.StringWriter;
+import java.io.*;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.security.Permission;
@@ -78,6 +70,7 @@ public class LauncherMapper<K1, V1, K2, V2> implements Mapper<K1, V1, K2, V2>, R
     static final String ACTION_DATA_NEW_ID = "newId";
     static final String ACTION_DATA_ERROR_PROPS = "error.properties";
     public static final String HADOOP2_WORKAROUND_DISTRIBUTED_CACHE = "oozie.hadoop-2.0.2-alpha.workaround.for.distributed.cache";
+    public static final String PROPAGATION_CONF_XML = "propagation-conf.xml";
 
     private void setRecoveryId(Configuration launcherConf, Path actionDir, String recoveryId) throws LauncherException {
         try {
@@ -142,6 +135,57 @@ public class LauncherMapper<K1, V1, K2, V2> implements Mapper<K1, V1, K2, V2>, R
         }
     }
 
+    /**
+     * Pushing all important conf to child.
+     */
+    private void propagateConf() {
+        Configuration propagationConf = new Configuration(false);
+        if (System.getProperty("oozie.action.id") != null) {
+            propagationConf.set("oozie.action.id", System.getProperty("oozie.action.id"));
+        }
+        if (System.getProperty("oozie.job.id") != null) {
+            propagationConf.set("oozie.job.id", System.getProperty("oozie.job.id"));
+        }
+        if(System.getProperty("oozie.launcher.job.id") != null) {
+            propagationConf.set("oozie.launcher.job.id", System.getProperty("oozie.launcher.job.id"));
+        }
+
+        Configuration actionConf = new Configuration(false);
+        String actionXml = System.getProperty("oozie.action.conf.xml");
+        if (actionXml == null) {
+            throw new RuntimeException("Missing Java System Property [oozie.action.conf.xml]");
+        }
+        if (!new File(actionXml).exists()) {
+            throw new RuntimeException("Action Configuration XML file [" + actionXml + "] does not exist");
+        }
+
+        actionConf.addResource(new Path("file:///", actionXml));
+
+        if(actionConf.get(LauncherMain.CHILD_MAPREDUCE_JOB_TAGS) != null) {
+            propagationConf.set("mapreduce.job.tags", actionConf.get(LauncherMain.CHILD_MAPREDUCE_JOB_TAGS));
+            System.out.println(LauncherMain.CHILD_MAPREDUCE_JOB_TAGS + " " + actionConf.get(LauncherMain.CHILD_MAPREDUCE_JOB_TAGS));
+        }
+
+        System.out.println("Path of propagation " + new File(actionXml).getParentFile().getPath());
+        File propagationXml = new File(new File(actionXml).getParentFile(), PROPAGATION_CONF_XML);
+        OutputStream os = null;
+        try {
+            os = new FileOutputStream(propagationXml);
+            propagationConf.writeXml(os);
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        } finally {
+            if (os != null) {
+                try {
+                    os.close();
+                } catch (IOException e) {
+                    throw new RuntimeException(e);
+                }
+            }
+        }
+        Configuration.addDefaultResource(PROPAGATION_CONF_XML);
+    }
+
     @Override
     public void map(K1 key, V1 value, OutputCollector<K2, V2> collector, Reporter reporter) throws IOException {
         try {
@@ -171,6 +215,9 @@ public class LauncherMapper<K1, V1, K2, V2> implements Mapper<K1, V1, K2, V2>, R
 
                     setupMainConfiguration();
 
+                    // Propagating the conf to use by child job.
+                    propagateConf();
+
                     try {
                         System.out.println("Starting the execution of prepare actions");
                         executePrepare();
@@ -434,7 +481,6 @@ public class LauncherMapper<K1, V1, K2, V2> implements Mapper<K1, V1, K2, V2>, R
         System.setProperty(ACTION_PREFIX + ACTION_DATA_NEW_ID, new File(ACTION_DATA_NEW_ID).getAbsolutePath());
         System.setProperty(ACTION_PREFIX + ACTION_DATA_OUTPUT_PROPS, new File(ACTION_DATA_OUTPUT_PROPS).getAbsolutePath());
         System.setProperty(ACTION_PREFIX + ACTION_DATA_ERROR_PROPS, new File(ACTION_DATA_ERROR_PROPS).getAbsolutePath());
-        System.setProperty("oozie.job.launch.time", getJobConf().get("oozie.job.launch.time"));
         String actionConfigClass = getJobConf().get(OOZIE_ACTION_CONFIG_CLASS);
         if (actionConfigClass != null) {
             System.setProperty(OOZIE_ACTION_CONFIG_CLASS, actionConfigClass);
diff --git sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/MapReduceMain.java sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/MapReduceMain.java
index 61cec7e..1ea2543 100644
--- sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/MapReduceMain.java
+++ sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/MapReduceMain.java
@@ -46,6 +46,7 @@ public class MapReduceMain extends LauncherMain {
         // loading action conf prepared by Oozie
         Configuration actionConf = new Configuration(false);
         actionConf.addResource(new Path("file:///", System.getProperty("oozie.action.conf.xml")));
+        setYarnTag(actionConf);
 
         JobConf jobConf = new JobConf();
         addActionConf(jobConf, actionConf);
diff --git sharelib/pig/src/main/java/org/apache/oozie/action/hadoop/PigMain.java sharelib/pig/src/main/java/org/apache/oozie/action/hadoop/PigMain.java
index d924018..ee9a393 100644
--- sharelib/pig/src/main/java/org/apache/oozie/action/hadoop/PigMain.java
+++ sharelib/pig/src/main/java/org/apache/oozie/action/hadoop/PigMain.java
@@ -95,6 +95,7 @@ public class PigMain extends LauncherMain {
         }
 
         actionConf.addResource(new Path("file:///", actionXml));
+        setYarnTag(actionConf);
 
         Properties pigProperties = new Properties();
         for (Map.Entry<String, String> entry : actionConf) {
diff --git sharelib/spark/pom.xml sharelib/spark/pom.xml
index db46b8c..c33d906 100644
--- sharelib/spark/pom.xml
+++ sharelib/spark/pom.xml
@@ -49,7 +49,11 @@
             <artifactId>commons-lang</artifactId>
             <scope>compile</scope>
         </dependency>
-
+        <dependency>
+            <groupId>org.apache.oozie</groupId>
+            <artifactId>oozie-sharelib-oozie</artifactId>
+            <scope>provided</scope>
+        </dependency>
         <dependency>
             <groupId>org.apache.spark</groupId>
             <artifactId>spark-core_2.10</artifactId>
diff --git sharelib/spark/src/main/java/org.apache.oozie.action.hadoop/SparkMain.java sharelib/spark/src/main/java/org.apache.oozie.action.hadoop/SparkMain.java
index dcf3868..b18a0b9 100644
--- sharelib/spark/src/main/java/org.apache.oozie.action.hadoop/SparkMain.java
+++ sharelib/spark/src/main/java/org.apache.oozie.action.hadoop/SparkMain.java
@@ -22,8 +22,6 @@ import org.apache.commons.lang.StringUtils;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.spark.deploy.SparkSubmit;
 
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -43,6 +41,7 @@ public class SparkMain extends LauncherMain {
     @Override
     protected void run(String[] args) throws Exception {
         Configuration actionConf = loadActionConf();
+        setYarnTag(actionConf);
         LauncherMainHadoopUtils.killChildYarnJobs(actionConf);
 
         List<String> sparkArgs = new ArrayList<String>();
diff --git sharelib/sqoop/src/main/java/org/apache/oozie/action/hadoop/SqoopMain.java sharelib/sqoop/src/main/java/org/apache/oozie/action/hadoop/SqoopMain.java
index d672bf3..4fe2524 100644
--- sharelib/sqoop/src/main/java/org/apache/oozie/action/hadoop/SqoopMain.java
+++ sharelib/sqoop/src/main/java/org/apache/oozie/action/hadoop/SqoopMain.java
@@ -60,6 +60,7 @@ public class SqoopMain extends LauncherMain {
         }
 
         sqoopConf.addResource(new Path("file:///", actionXml));
+        setYarnTag(sqoopConf);
 
         String delegationToken = getFilePathFromEnv("HADOOP_TOKEN_FILE_LOCATION");
         if (delegationToken != null) {
